TODOs for JUnitExt
==================

- Add documentation for JDK 1.4 support to docs and website
	- Java plain code
	- ANT sample
	- refer to good work of RetroWeaver
	
- Improve website documentation

- Sanity-Check for distribution
	- Test SwingUI without load errors
	- make ANT build, with -lib lib

- Website
	- add links to website
		- additional feature requests
		- mailing list discussion thread 
	- add JUGS slides to website
	- add EN JUGS slides to website
	
	- finish documentation (implementation part)
	
	- use xdocs or docbook
		- see article (PDF)
		- see Apache logging paper


- Google Code Hosting:
	- SVNSYNC

- ANT integration
	- fix: execute of AllTests from ANT does produce a report without filled test names
		- file a bug to JUnit, if it does NOT work
	- make tests with ANT 1.7
	- Kent, David: Who will do ANT integration ?

- Eclipse integration:
	- will @Ignore text be displayed ?
	- if not, post a bug to Eclipse

- setup cruise control process
	- test cruise control, or Maven / Continuum
	- see article of JavaMagazin

- New features:
	- Category-Filter:
		- add static methods with INCLUDE/EXCLUDE filters
		- add test cases for it
	- Add a runner for Multithreaded tests: @RunWith(MTRunner.class)
		- configure no of threads, max. running time ?
	- Add annotation for @Platform
		- support OS versions
		- support JDK versions
		- support Eclipse versions, use pattern as in Eclipse (ARCH, NL, OS, WS)
	- Test whether JUnit 4 extensions could be plugged into Eclipse JUnit plugins
	- provide declarative test pecifications (as provided by TestNG)
	- probably provide scripting support
		- check for Groovy, RS, others ?
		- Use script engine API ?
    - XMLParamterizedRunner
        - finalize and formalize XML file format with a DTD and/or XML Schema
        - add the ability to set test parameters via setter methods
        - provide alternative parameter factories
        - add support for Spring bean configuration files?
        - allow parameter sets to be named and to reflect the name in the 
          test names that are sent to the test runner listeners.
        - when appropriate, attempt to infer the property type (java 5 generics)
          using reflection (this could be particularly useful for collection types)
        - allow parameter sets to be "disabled"

- other frameworks:
	- make tests with dbUnit, Jammy (UI)
	
- JUnit 4 for embedded environments
	- Visitor pattern for "visiting" all test cases
		- for testing: TraceVisitor
	- collect metadata
	- generate static code for running it without any metadata

- JUnit 4.1:
	- deployment is a litte bit ugly (empty folders)
